package main

import (
	"strings"
	"testing"
)

func TestInterpretString(t *testing.T) {
	tests := [][2]interface{}{
		{"", 0},
		{"()", 1},
		{"(())", 2},
		{"((()))", 3},
		{"(((())))", 4},
		{"(())()", 1},
		{"((()))()", 2},
		{"(((())))()", 3},
		{"((((()))))()", 4},
		{"((()))()()", 1},
		{"(((())))()()", 2},
		{"((((()))))()()", 3},

		{"()()", 0},
		{"()(())", 0},
		{"(())(())", 1},
		{"(())((()))", 1},

		{"()()()", -1},
		{"()()(())", -1},
		{"()()((()))", -1},
		{"()(())()", -1},
		{"()(())(())", -1},

		{"()()()()", 1},
		{"()()()()()", 0},
		{"(()()()())", 2},

		{"(()())", 1},
		{"((()()))", 2},
		{"((())())", 2},
		{"((()))()", 2},

		{"()()()(())()", 1},
		{"()()()((()))()", 2},
		{"()()()(((())))()", 3},
		{"()()()(())(())", 1},
		{"()()()((()))(())", 2},
		{"()()()(((())))(())", 3},
		{"()()()(())((()))", 1},
		{"()()()((()))((()))", 2},
		{"()()()(((())))((()))", 3},
	}
	for _, pair := range tests {
		p, r := []byte(pair[0].(string)), pair[1].(int)
		parsed := Parse(p)
		c := Count(parsed)
		if r != c {
			t.Errorf("%s: Expected %d but got %d %v", p, r, c, *parsed)
		} else {
			t.Logf("%s: Succeeded with %d %v", p, c, *parsed)
		}
	}
}

func TestParameters(t *testing.T) {
	tests := [][2]interface{}{
		{"()()(())(()())()", 0},
		{"()()(())(()())(())", 1},
		{"()()(())(()())((()))", 2},
		{"()()(())(()())(((())))", 3},

		{"()()()(())()()", 0},
		{"()()()(())(())()", 0},
		{"()()()(())((()))()", 0},

		{"()()(())(())()()", 0},
		{"()()(())(())(())()", 0},
		{"()()(())(())((()))()", 0},

		{"()()()(()()())()", 0},
		{"()()()(()()())(())", 1},
		{"()()()(()()())((()))", 2},
		{"()()()(()()())(((())))", 3},

		{"()()()(()()())()", 0},
		{"()()()(()()())(())", 1},
		{"()()()(()()())((()))", 2},
		{"()()()(()()())(((())))", 3},

		//Name[1*]      Name[2*]   Call[1*] with 2*   Name[3*]		Call[3*
		{"()()((*))(  ()()(((*)))( (*)(((*))()) )  )( ()()((((*))))( (((*)))() )()", 0},
		{"()()((*))(  ()()(((*)))( (*)(((*))()) )  )( ()()((((*))))( (((*)))() )(())", 1},
		{"()()((*))(  ()()(((*)))( (*)(((*))()) )  )( ()()((((*))))( (((*)))() )((()))", 2},

		//Name[2]      Name[2*]     Name[Call[2*]+2]    Call[2]        Name[1*]   Call[2*]  Call[1*]
		//{"()()((()))(  ()()(((*)))( ()()(((((*))()))) ( (())() ) )  )( ()()((*))((( (((*)))( (*)() ) )))  )()", 0},
		//{"()()((()))(  ()()(((*)))( ()()(((((*))()))) ( (())() ) )  )( ()()((*))((( (((*)))( (*)() ) )))  )(())", 3},
		//{"()()((()))(  ()()(((*)))( ()()(((((*))()))) ( (())() ) )  )( ()()((*))((( (((*)))( (*)() ) )))  )((()))", 6},
	}
	for _, pair := range tests {
		s := pair[0].(string)
		s = strings.Replace(s, "*", "((((()))))", -1)
		s = strings.Replace(s, " ", "", -1)

		p, r := []byte(s), pair[1].(int)
		c := Count(Parse(p))
		if r != c {
			t.Errorf("%s: Expected %d but got %d", p, r, c)
		} else {
			t.Logf("%s: Succeeded with %d", p, c)
		}
	}
}
